using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace UnityEngine.XR.iOS
{
	public class PlayerControl : MonoBehaviour {

		public GameObject sceneRoot;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10; 

		// Use this for initialization
		void Start () {
			
		}

		bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
		{
			List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
			if (hitResults.Count > 0) {
				foreach (var hitResult in hitResults) {
					Debug.Log ("Got hit!");
					sceneRoot.transform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
					sceneRoot.transform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
					sceneRoot.SetActive (true);
					Debug.Log ("placed");
					//Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
					return true;
				}
			}
			return false;
		}
		
		// Update is called once per frame
		void Update () {
			if (Input.GetMouseButtonDown (0)) {
				Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
				RaycastHit hit;
				Debug.Log ("cast!");

				//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
				//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
				if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
					//we're going to get the position from the contact point
					//m_HitTransform.position = hit.point;
					Debug.Log (hit.transform.name);
					if (hit.transform.tag == "People") {
						hit.transform.GetComponent<Narrate> ().Play ();
					} else {
						Vector3 newPos = hit.transform.position;
						newPos.y = newPos.y;
						sceneRoot.transform.position = newPos;
						sceneRoot.SetActive (true);
						Debug.Log ("placed");
					}
					//Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

					//and the rotation from the transform of the plane collider
					//m_HitTransform.rotation = hit.transform.rotation;
				}

				var touch = Input.GetTouch(0);

				var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
				ARPoint point = new ARPoint {
					x = screenPosition.x,
					y = screenPosition.y
				};

				// prioritize reults types
				ARHitTestResultType[] resultTypes = {
					ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
					// if you want to use infinite planes use this:
					//ARHitTestResultType.ARHitTestResultTypeExistingPlane,
					ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
					ARHitTestResultType.ARHitTestResultTypeFeaturePoint
				}; 

				foreach (ARHitTestResultType resultType in resultTypes)
				{
					if (HitTestWithResultType (point, resultType))
					{
						return;
					}
				}



			}
		}
	}
}
